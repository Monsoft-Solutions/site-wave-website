---
description: 
globs: 
alwaysApply: true
---
# TypeScript Code Style and Best Practices

## ✅ Naming Conventions

### 📄 File Naming

- Use **kebab-case** for all file names.
- Use semantic suffixes to clearly indicate the content type:
  - `*.type.ts` → Type aliases
  - `*.interface.ts` → Interfaces (only when necessary)
  - `*.enum.ts` → Enums
  - `*.model.ts` → Data models (if applicable)
  - `*.table.ts` → Database-related table definitions
  - `*.service.ts` → Business logic or service layers
  - `*.util.ts` or `*.helper.ts` → Utility functions or helpers
  - `*.hook.ts` → React or framework hooks
  - `*.config.ts` → Configuration files
- Example:  
  - `user.type.ts`  
  - `user.enum.ts`  
  - `auth.service.ts`  
  - `database.config.ts`

### 🔤 Code Naming

- **Types, Interfaces, Enums, Classes:** Use `PascalCase`
- **Variables, Functions, Parameters:** Use `camelCase`
- **Constants:** Use `UPPER_SNAKE_CASE` for global constants
- **Private class members:** Prefix with underscore (`_example`)
- **Generic Type Parameters:** Use single uppercase letters (`T`, `K`, `V`) and extend with context when appropriate (`TUser`, `TResult`)

---

## 🧩 Type Definition Best Practices

1. **Prefer `type` over `interface`** unless declaration merging is required
2. **Use TypeScript utility types** (`Omit`, `Pick`, `Partial`, etc.) where appropriate
3. **Document your types** with JSDoc comments to explain their purpose
4. **Never use `any`** - create proper type definitions
5. **Keep types focused** - each type should have a single purpose
6. **Use readonly** for immutable properties

### ⚠️ Common Mistakes to Avoid

1. Duplicating types in multiple locations
2. Creating overly complex generic types
3. Using `any` instead of creating proper types
4. Not documenting complex types
5. Creating circular dependencies between type files 

## ⚙️ Functions

- Use arrow functions for inline callbacks and anonymous functions.
- Always explicitly type parameters and return values.
- Prefer `async/await` over raw Promises.
- Use descriptive object parameter patterns:
  ```ts
  const updateUser = ({ id, data }: { id: string; data: UserInput }) => { ... };