---
description: Comprehensive UI component and styling guidelines for a Turborepo project using Shadcn UI, Radix UI, and Tailwind
globs: 
alwaysApply: false
---
# UI Components and Styling Guidelines

## Existing Components Inventory

### Layout Components
- **Header** (`components/layout/Header.tsx`) - Responsive navigation with mobile menu, sticky behavior, and scroll detection
- **Footer** (`components/layout/Footer.tsx`) - Multi-column layout with social links and responsive grid
- **Loading** (`components/layout/Loading.tsx`) - Multiple loading components: `Loading`, `LoadingSpinner`, `LoadingSkeleton`
- **ErrorBoundary** (`components/layout/ErrorBoundary.tsx`) - User-friendly error handling with reset functionality

### UI Components (Shadcn-based)
- **Button** (`components/ui/button.tsx`) - Multiple variants and sizes with full TypeScript support
- **Card** (`components/ui/card.tsx`) - Composable card structure with header, content, and footer
- **Input** (`components/ui/input.tsx`) - Styled form input with focus states and file support
- **Label** (`components/ui/label.tsx`) - Accessible form labels with Radix UI integration
- **Toaster** (`components/ui/toaster.tsx`) - Toast notifications using Sonner with theme integration

### Form Components
- **FormField** (`components/forms/FormField.tsx`) - React Hook Form integration with error handling
- **ContactForm** (`components/forms/ContactForm.tsx`) - Complete form example with Zod validation

### SEO Components
- **JsonLd** (`components/seo/JsonLd.tsx`) - Structured data implementation for rich snippets
- **Site Config** (`lib/config/site.ts`) - Centralized site configuration and metadata
- **SEO Config** (`lib/config/seo.ts`) - Metadata generation helpers and JSON-LD schemas

## Architecture Principles

- **Component Location**: 
  - Before implementing a component for a basic element, check if we can accomplish it with shadcn. If we do, then install the component
  - Layout components go in `components/layout/`
  - UI components go in `components/ui/` (shadcn-managed)
  - Form components go in `components/forms/`
  - SEO components go in `components/seo/`
  - App-specific components should be in their respective app directories
  - Break complex views into smaller, reusable components

- **Component Organization**:
  - Group related components in directories with an index.ts barrel file
  - Include component tests alongside the component files
  - Follow the established naming patterns: use kebab-case for files, PascalCase for components

## UI Framework and Styling

- Use Shadcn UI components as the foundation with Tailwind CSS for styling
- Implement responsive design with Tailwind using a mobile-first approach
- Follow the project's design tokens for consistent spacing, colors, and typography
- Use CSS custom properties defined in `app/globals.css` for theming

### Installing New Shadcn Components

Always check if the component you need already exists in our `components/ui/` directory first. If not, install it:

```sh
npx shadcn@latest add <COMPONENT>
```

Examples:
```sh
npx shadcn@latest add progress
npx shadcn@latest add dialog
npx shadcn@latest add tabs
```

After installation, the component will be available in `components/ui/` and ready to use.

### Using Existing UI Components

```tsx
// Button usage
import { Button } from "@/components/ui/button";
<Button variant="default" size="lg">Click me</Button>

// Card usage
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
<Card>
  <CardHeader>
    <CardTitle>Card Title</CardTitle>
  </CardHeader>
  <CardContent>Card content here</CardContent>
</Card>

// Form field usage
import { FormField } from "@/components/forms/FormField";
<FormField
  name="email"
  label="Email Address"
  type="email"
  required
  description="We'll never share your email"
/>
```

### Image Optimization

- Always use `next/image` for optimal performance and responsive behavior:

```tsx
import Image from 'next/image';

<Image 
  src="/path/to/image.jpg" 
  alt="Descriptive alt text" 
  width={500} 
  height={300} 
  priority={isHeroImage}
  className="rounded-lg"
/>
```

## Animation Libraries and Dependencies

The project includes several animation libraries for creating engaging user experiences:

### Core Animation Libraries
- **framer-motion** - Primary animation library for React components with declarative API
- **@react-spring/web** - Physics-based spring animations for smooth interactions
- **react-intersection-observer** - Scroll-triggered animations with viewport detection
- **react-countup** - Animated number counters for statistics and metrics
- **react-type-animation** - Typewriter and text animation effects
- **gsap** - Advanced timeline-based animations for complex sequences
- **lottie-react** - Lottie animation support for After Effects exports

### Installing Animation Dependencies

```sh
npm install framer-motion @react-spring/web react-intersection-observer react-countup react-type-animation gsap lottie-react
npm install --save-dev @types/react
```

## Animation Patterns and Best Practices

### Framer Motion Patterns

#### Basic Motion Components
```tsx
import { motion } from "framer-motion";

// Basic animated element
<motion.div
  initial={{ opacity: 0, y: 20 }}
  animate={{ opacity: 1, y: 0 }}
  transition={{ duration: 0.5 }}
>
  Content
</motion.div>

// Hover interactions
<motion.button
  whileHover={{ scale: 1.05 }}
  whileTap={{ scale: 0.95 }}
  transition={{ duration: 0.2 }}
>
  Interactive Button
</motion.button>
```

#### Staggered Animations
```tsx
const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1,
      delayChildren: 0.2,
    },
  },
};

const itemVariants = {
  hidden: { opacity: 0, y: 20 },
  visible: {
    opacity: 1,
    y: 0,
    transition: { type: "spring" as const, stiffness: 100 },
  },
};

<motion.div variants={containerVariants} initial="hidden" animate="visible">
  {items.map((item, index) => (
    <motion.div key={index} variants={itemVariants}>
      {item}
    </motion.div>
  ))}
</motion.div>
```

#### Scroll-Triggered Animations
```tsx
import { useScroll, useTransform } from "framer-motion";
import { useInView } from "react-intersection-observer";

const [ref, inView] = useInView({
  threshold: 0.3,
  triggerOnce: true,
});

const { scrollY } = useScroll();
const y = useTransform(scrollY, [0, 300], [0, 100]);

<motion.div
  ref={ref}
  initial={{ opacity: 0 }}
  animate={inView ? { opacity: 1 } : { opacity: 0 }}
  style={{ y }}
>
  Scroll-triggered content
</motion.div>
```

#### Parallax Effects
```tsx
import { useScroll, useTransform, useSpring } from "framer-motion";

const { scrollYProgress } = useScroll();
const backgroundY = useTransform(scrollYProgress, [0, 1], [0, -50]);
const springY = useSpring(backgroundY, { stiffness: 100, damping: 30 });

<motion.div style={{ y: springY }}>
  Parallax background element
</motion.div>
```

### Interactive Hover States

```tsx
const [isHovered, setIsHovered] = useState(false);

<motion.div
  onHoverStart={() => setIsHovered(true)}
  onHoverEnd={() => setIsHovered(false)}
  animate={isHovered ? { scale: 1.05 } : { scale: 1 }}
  transition={{ duration: 0.3 }}
>
  <motion.div
    animate={isHovered ? { rotate: [0, -5, 5, 0] } : {}}
    transition={{ duration: 0.5 }}
  >
    Hover me for interaction
  </motion.div>
</motion.div>
```

### Counter Animations

```tsx
import CountUp from "react-countup";
import { useInView } from "react-intersection-observer";

const [ref, inView] = useInView({ triggerOnce: true });

<div ref={ref}>
  {inView && (
    <CountUp
      end={1000}
      duration={2.5}
      delay={0.5}
      preserveValue
      suffix="+"
    />
  )}
</div>
```

### Typewriter Effects

```tsx
import { TypeAnimation } from "react-type-animation";

<TypeAnimation
  sequence={[
    'Creating Digital Experiences',
    2000,
    'Building Modern Websites',
    2000,
    'Designing User Interfaces',
    2000,
  ]}
  wrapper="h1"
  speed={50}
  style={{ fontSize: '2rem' }}
  repeat={Infinity}
/>
```

### Particle Systems

```tsx
const FloatingParticle = ({ delay, duration, x, y, oscillation }: {
  delay: number;
  duration: number;
  x: number;
  y: number;
  oscillation: number;
}) => (
  <motion.div
    className="absolute w-2 h-2 bg-primary/30 rounded-full"
    initial={{ opacity: 0, x, y, scale: 0 }}
    animate={{
      opacity: [0, 1, 0],
      y: y - 200,
      x: [x, x + oscillation, x - oscillation, x],
      scale: [0, 1, 0],
      rotate: 360,
    }}
    transition={{
      duration,
      repeat: Infinity,
      delay,
      ease: "easeInOut",
    }}
  />
);
```

### Custom CSS Animations

Add reusable animations to `app/globals.css`:

```css
@keyframes float {
  0%, 100% { transform: translateY(0px); }
  50% { transform: translateY(-10px); }
}

@keyframes gradient {
  0%, 100% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
}

.animate-float {
  animation: float 3s ease-in-out infinite;
}

.animate-gradient {
  animation: gradient 15s ease infinite;
  background-size: 400% 400%;
}
```

## SSR and Hydration Considerations

### Avoiding Hydration Mismatches

**❌ Don't use random values directly in render:**
```tsx
// This causes hydration errors
<motion.div initial={{ x: Math.random() * 100 }}>
```

**✅ Use deterministic values or client-side generation:**
```tsx
const [particles, setParticles] = useState<ParticleType[]>([]);
const [isClient, setIsClient] = useState(false);

useEffect(() => {
  setIsClient(true);
  // Generate particles only on client
  const newParticles = Array.from({ length: 20 }, (_, i) => ({
    id: i,
    x: (window.innerWidth / 20) * i,
    y: window.innerHeight + (i % 4) * 25,
    duration: 15 + (i % 5) * 2, // Deterministic pattern
  }));
  setParticles(newParticles);
}, []);

// Render only after hydration
{isClient && particles.map(particle => (
  <FloatingParticle key={particle.id} {...particle} />
))}
```

### Client-Side Only Components

For components that must run only on the client:

```tsx
import dynamic from 'next/dynamic';

const ClientOnlyParticles = dynamic(() => import('./ParticleSystem'), {
  ssr: false,
  loading: () => <div>Loading particles...</div>
});
```

## Performance Optimization

### Animation Performance Guidelines

1. **Use CSS transforms and opacity for smooth 60fps animations**
2. **Limit concurrent animations to avoid performance issues**
3. **Use `will-change` CSS property sparingly and remove after animation**
4. **Prefer `transform` over changing `top/left/width/height`**
5. **Use `useSpring` for physics-based animations that feel natural**

### Optimized Animation Examples

```tsx
// Good: Uses transforms
<motion.div
  whileHover={{ scale: 1.05, rotateY: 5 }}
  transition={{ duration: 0.3 }}
/>

// Good: Spring physics
const springConfig = { stiffness: 100, damping: 30 };
const y = useSpring(scrollY, springConfig);

// Good: Limited particle count
const PARTICLE_COUNT = 20; // Reasonable for performance
```

### Reduce Motion Preference

Always respect user preferences for reduced motion:

```tsx
const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;

<motion.div
  animate={prefersReducedMotion ? {} : { scale: [1, 1.1, 1] }}
  transition={{ duration: prefersReducedMotion ? 0 : 2 }}
>
  Respects motion preferences
</motion.div>
```

## Animation Accessibility

### Motion Sensitivity

```tsx
import { useReducedMotion } from "framer-motion";

const shouldReduceMotion = useReducedMotion();

<motion.div
  animate={shouldReduceMotion ? {} : { y: [0, -10, 0] }}
  transition={{ duration: shouldReduceMotion ? 0 : 2 }}
>
  Content
</motion.div>
```

### Focus Management

Ensure animations don't interfere with keyboard navigation:

```tsx
<motion.button
  whileFocus={{ scale: 1.05 }}
  className="focus:outline-none focus:ring-2 focus:ring-primary"
>
  Accessible animated button
</motion.button>
```

### Screen Reader Considerations

Use `aria-live` regions for dynamic content changes:

```tsx
<div aria-live="polite">
  <CountUp end={count} />
</div>
```

## Animation Testing Guidelines

### Visual Regression Testing
- Test animations at different viewport sizes
- Verify animations work with reduced motion settings
- Check performance with DevTools during animations

### Component Testing
```tsx
import { render, screen } from '@testing-library/react';
import { MotionConfig } from 'framer-motion';

// Disable animations in tests
const TestWrapper = ({ children }) => (
  <MotionConfig reducedMotion="always">
    {children}
  </MotionConfig>
);

test('component renders without animation issues', () => {
  render(<AnimatedComponent />, { wrapper: TestWrapper });
  expect(screen.getByText('Content')).toBeInTheDocument();
});
```

### Performance Testing
- Monitor frame rates during animations using browser DevTools
- Test on lower-end devices for performance bottlenecks
- Use React DevTools Profiler to identify expensive re-renders

## Form Handling Patterns

Use our established form patterns with React Hook Form and Zod validation:

```tsx
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { contactFormSchema } from "@/lib/utils/validation";
import { FormField } from "@/components/forms/FormField";

const form = useForm({
  resolver: zodResolver(contactFormSchema),
  defaultValues: { name: "", email: "", message: "" }
});
```

Validation schemas are available in `lib/utils/validation.ts` for common use cases.

## SEO Configuration

### Page Metadata
Use the SEO helper functions for consistent metadata:

```tsx
import { generateSeoMetadata } from "@/lib/config/seo";

export const metadata = generateSeoMetadata({
  title: "Page Title",
  description: "Page description for SEO",
  keywords: ["keyword1", "keyword2"],
  canonicalUrl: "/page-url"
});
```

### JSON-LD Structured Data
Add structured data for better search engine understanding:

```tsx
import { JsonLd } from "@/components/seo/JsonLd";

<JsonLd
  data={{
    "@context": "https://schema.org",
    "@type": "Article",
    "headline": "Article Title",
    "description": "Article description",
    "author": { "@type": "Person", "name": "Author Name" }
  }}
/>
```

### Site Configuration
Update site-wide SEO settings in `lib/config/site.ts`:

```ts
export const siteConfig = {
  name: "Site Name",
  description: "Site description",
  url: "https://yoursite.com",
  ogImage: "/og-image.jpg",
  // ... other config
};
```

### Dynamic OG Images
The site includes dynamic OG image generation at `/api/og`. Use query parameters to customize:

```tsx
// In your metadata
openGraph: {
  images: [`/api/og?title=${encodeURIComponent(title)}&description=${encodeURIComponent(description)}`]
}
```

## Loading and Error States

Use our existing loading and error components for consistency:

```tsx
import { Loading, LoadingSpinner, LoadingSkeleton } from "@/components/layout/Loading";
import { ErrorBoundary } from "@/components/layout/ErrorBoundary";

// For loading states
<LoadingSpinner />
<LoadingSkeleton className="h-40 w-full" />

// For error boundaries
<ErrorBoundary>
  <YourComponent />
</ErrorBoundary>
```

## Toast Notifications

Use the configured toast system for user feedback:

```tsx
import { toast } from "sonner";

// Success toast
toast.success("Form submitted successfully!");

// Error toast
toast.error("Something went wrong");

// Custom toast
toast("Custom message", {
  description: "Additional details",
  action: {
    label: "Undo",
    onClick: () => console.log("Undo"),
  },
});
```

## Accessibility Best Practices

- Ensure all interactive elements have appropriate ARIA attributes
- Maintain proper heading hierarchy (h1, h2, h3, etc.)
- Use semantic HTML elements (`<button>`, `<nav>`, `<article>`, etc.)
- Ensure color contrast meets WCAG standards (minimum ratio of 4.5:1)
- Make all functionality available via keyboard
- Use our accessible form components that include built-in ARIA attributes
- Respect user motion preferences with `prefers-reduced-motion`
- Ensure animations don't interfere with screen readers

## Performance Considerations

- Implement virtualization for long lists using `react-virtualized` or `react-window`
- Lazy load components below the fold using `next/dynamic` or React's `Suspense` and `lazy`
- Optimize images with appropriate sizes and formats
- Use our loading states to improve perceived performance
- **Animation Performance**: Use transforms and opacity for smooth 60fps animations
- **Limit concurrent animations** to avoid performance bottlenecks
- **Monitor frame rates** during development using browser DevTools
- **Use deterministic values** instead of random values to avoid hydration issues

## Testing Guidelines

- Test visual appearance with Storybook and implement visual regression tests
- Test form validation with various input scenarios
- Ensure SEO metadata is properly generated for different page types
- Test responsive behavior across different screen sizes
- **Animation Testing**: Verify animations work with reduced motion settings
- **Performance Testing**: Monitor frame rates and test on lower-end devices
- **Accessibility Testing**: Ensure animations don't interfere with keyboard navigation or screen readers
