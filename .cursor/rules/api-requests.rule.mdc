---
description: Contains the instructions for implementating API requests from the client and the API routes, hooks and more.
globs: 
alwaysApply: false
---
# API Request Handling Guidelines

## Type Definitions

1. Always define response types in `/lib/types` folder:
   - Use suffix `.type.ts` for all type files
   - Follow naming convention: `entity-name.type.ts`
   - Place shared types in `/lib/types`
   - Place feature-specific types in `/lib/types/features/{feature-name}`

2. Always use the `ApiResponse<T>` wrapper for all API responses:

```typescript
// Good example
import { ApiResponse } from "@/lib/types/api-response.type";

type User = {
  id: string;
  name: string;
  email: string;
};

// Define the specific data type
type GetUserResponse = ApiResponse<User>;

// Bad example - not using ApiResponse wrapper
type BadUserResponse = {
  success: boolean;
  data: User;
  error?: string;
};
```

## Next.js 15 Parameter Handling (CRITICAL)

### üö® Breaking Change in Next.js 15

In **Next.js 15**, route parameters are now **asynchronous** and must be awaited before accessing their properties. This applies to:
- API route handlers (`route.ts`)
- Page components (`page.tsx`)
- Layout components (`layout.tsx`)
- Metadata generation functions

### API Route Handlers - Correct Pattern

```typescript
// ‚úÖ CORRECT - Next.js 15 pattern
import { NextRequest, NextResponse } from "next/server";
import { ApiResponse } from "@/lib/types/api-response.type";

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    // MUST await params before accessing properties
    const { id } = await params;
    
    // Your logic here
    return NextResponse.json({
      success: true,
      data: { id }
    } as ApiResponse<{ id: string }>);
  } catch (error) {
    return NextResponse.json({
      success: false,
      data: {} as { id: string },
      error: error instanceof Error ? error.message : "Failed to process request"
    } as ApiResponse<{ id: string }>, { status: 500 });
  }
}

export async function PATCH(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    const body = await request.json();
    
    // Your update logic here
    return NextResponse.json({
      success: true,
      data: null,
      message: `Updated entity ${id}`
    } as ApiResponse<null>);
  } catch (error) {
    return NextResponse.json({
      success: false,
      data: null,
      error: error instanceof Error ? error.message : "Failed to update"
    } as ApiResponse<null>, { status: 500 });
  }
}
```

```typescript
// ‚ùå WRONG - Old Next.js 14 pattern (will cause build errors)
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } } // Missing Promise wrapper
) {
  const { id } = params; // Direct access without await
  // This will fail in Next.js 15
}
```

### Multiple Parameters

```typescript
// ‚úÖ CORRECT - Multiple dynamic parameters
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ categoryId: string; itemId: string }> }
) {
  try {
    const { categoryId, itemId } = await params;
    
    // Your logic here
    return NextResponse.json({
      success: true,
      data: { categoryId, itemId }
    });
  } catch (error) {
    // Error handling
  }
}
```

### Catch-all Routes

```typescript
// ‚úÖ CORRECT - Catch-all segments
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ slug: string[] }> }
) {
  try {
    const { slug } = await params;
    
    // slug is an array: ['segment1', 'segment2', ...]
    return NextResponse.json({
      success: true,
      data: { slug }
    });
  } catch (error) {
    // Error handling
  }
}

// ‚úÖ CORRECT - Optional catch-all segments
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ slug?: string[] }> }
) {
  try {
    const { slug } = await params;
    
    // slug can be undefined for the base route
    return NextResponse.json({
      success: true,
      data: { slug: slug || [] }
    });
  } catch (error) {
    // Error handling
  }
}
```

### Page Components

```typescript
// ‚úÖ CORRECT - Server Component (async function)
export default async function UserPage({
  params
}: {
  params: Promise<{ id: string }>
}) {
  const { id } = await params;
  
  return <div>User ID: {id}</div>;
}
```

```typescript
// ‚úÖ CORRECT - Client Component (use React.use())
'use client'
import { use } from 'react';

export default function UserPage({
  params
}: {
  params: Promise<{ id: string }>
}) {
  const { id } = use(params);
  
  return <div>User ID: {id}</div>;
}
```

### Migration from Next.js 14

If you're migrating from Next.js 14, update your route handlers:

```typescript
// Before (Next.js 14)
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  const { id } = params;
  // ...
}

// After (Next.js 15)
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  const { id } = await params;
  // ...
}
```

### Common Mistakes to Avoid

```typescript
// ‚ùå WRONG - Forgetting Promise wrapper in type
{ params }: { params: { id: string } }

// ‚ùå WRONG - Accessing params property directly
const id = params.id;

// ‚ùå WRONG - Destructuring params directly
const { id } = params;

// ‚ùå WRONG - Using await on individual properties
const id = await params.id;

// ‚úÖ CORRECT - Proper async handling
const { id } = await params;
```

## Client-Side API Requests

1. Prefer direct API calls in components for simple requests:

```typescript
// Good example - direct fetch in component
import { useState, useEffect } from "react";
import { ApiResponse } from "@/lib/types/api-response.type";
import { User } from "@/lib/types/user.type";

function UserProfile({ userId }: { userId: string }) {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    async function fetchUser() {
      try {
        const response = await fetch(`/api/users/${userId}`);
        const result: ApiResponse<User> = await response.json();
        
        if (result.success) {
          setUser(result.data);
        } else {
          setError(result.error || "Failed to fetch user");
        }
      } catch (error) {
        setError(error instanceof Error ? error.message : "Unknown error occurred");
      } finally {
        setIsLoading(false);
      }
    }

    fetchUser();
  }, [userId]);

  // Component rendering logic
}
```

2. Create custom hooks for reusable or complex data fetching:

```typescript
// Good example - custom hook for reusable fetching logic
import { useState, useEffect } from "react";
import { ApiResponse } from "@/lib/types/api-response.type";
import { User } from "@/lib/types/user.type";

export function useUser(id: string) {
  const [data, setData] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    async function fetchData() {
      setIsLoading(true);
      try {
        const response = await fetch(`/api/users/${id}`);
        const result: ApiResponse<User> = await response.json();
        
        if (result.success) {
          setData(result.data);
          setError(null);
        } else {
          setError(result.error || "Failed to fetch user");
          setData(null);
        }
      } catch (error) {
        setError(error instanceof Error ? error.message : "Unknown error occurred");
        setData(null);
      } finally {
        setIsLoading(false);
      }
    }

    fetchData();
  }, [id]);

  return { data, isLoading, error };
}

// Usage in component
function UserProfile({ userId }: { userId: string }) {
  const { data: user, isLoading, error } = useUser(userId);
  
  // Component rendering logic
}
```

## Server-Side API Routes

1. Structure API routes in `/app/api` folder using Next.js App Router:
   - Follow RESTful conventions
   - Use folder structure for route parameters: `/app/api/[entity]/[id]/route.ts`

2. Keep simple logic directly in route handlers:

```typescript
// Good example - simple logic in route handler with Next.js 15 async params
import { NextRequest, NextResponse } from "next/server";
import { ApiResponse } from "@/lib/types/api-response.type";
import { User } from "@/lib/types/user.type";
import { db } from "@/lib/db";

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    
    // Simple database query directly in the route handler
    const user = await db.users.findUnique({
      where: { id }
    });
    
    if (!user) {
      return NextResponse.json({
        success: false,
        data: {} as User,
        error: "User not found"
      } as ApiResponse<User>, { status: 404 });
    }
    
    return NextResponse.json({
      success: true,
      data: user
    } as ApiResponse<User>);
  } catch (error) {
    return NextResponse.json({
      success: false,
      data: {} as User,
      error: error instanceof Error ? error.message : "Failed to fetch user"
    } as ApiResponse<User>, { status: 500 });
  }
}
```

3. Move complex business logic to `/lib/api` services:

```typescript
// Good example - complex logic in service
// /lib/api/users.api.ts
import { db } from "@/lib/db";
import { User } from "@/lib/types/user.type";
import { ApiResponse } from "@/lib/types/api-response.type";

export async function getUserWithRelations(id: string): Promise<ApiResponse<User>> {
  try {
    // Complex query with relations, permissions, etc.
    const user = await db.users.findUnique({
      where: { id },
      include: {
        posts: true,
        comments: true,
        profile: true
      }
    });
    
    if (!user) {
      return {
        success: false,
        data: {} as User,
        error: "User not found"
      };
    }
    
    // Additional business logic, data transformation, etc.
    const enhancedUser = {
      ...user,
      isAdmin: checkUserPermissions(user),
      formattedJoinDate: formatDate(user.createdAt)
    };
    
    return {
      success: true,
      data: enhancedUser
    };
  } catch (error) {
    return {
      success: false,
      data: {} as User,
      error: error instanceof Error ? error.message : "Failed to fetch user"
    };
  }
}

// Usage in route handler with Next.js 15 async params
// /app/api/users/[id]/route.ts
import { NextRequest, NextResponse } from "next/server";
import { getUserWithRelations } from "@/lib/api/users.api";

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    const result = await getUserWithRelations(id);
    return NextResponse.json(result, { 
      status: result.success ? 200 : result.error === "User not found" ? 404 : 500 
    });
  } catch (error) {
    return NextResponse.json({
      success: false,
      data: {} as User,
      error: error instanceof Error ? error.message : "Failed to process request"
    } as ApiResponse<User>, { status: 500 });
  }
}
```

## Error Handling

1. Always handle both network and API errors:
   - Network errors (fetch failures)
   - API errors (non-200 responses)
   - Validation errors

2. Provide meaningful error messages:

```typescript
// Good example
try {
  const response = await fetch(`/api/users/${id}`);
  
  if (!response.ok) {
    const errorData = await response.json().catch(() => ({}));
    return {
      success: false,
      data: {} as T,
      error: errorData.message || `API error: ${response.status}`
    };
  }
  
  const data = await response.json();
  return data;
} catch (error) {
  return {
    success: false,
    data: {} as T,
    error: error instanceof Error ? error.message : "Unknown error occurred"
  };
}

// Bad example
if (!response.ok) {
  throw new Error("Failed");
}
```

## Response Consistency

1. Always return responses in the `ApiResponse<T>` format:
   - Set `success` boolean flag
   - Include properly typed `data` property
   - Include `error` string when applicable
   - Optionally include `message` for additional context

2. Use consistent HTTP status codes:
   - 200: Successful requests
   - 400: Bad request (client error)
   - 401/403: Authentication/authorization errors
   - 404: Resource not found
   - 500: Server errors

## Quick Reference Checklist

### Before writing any API route handler:
- [ ] Is `params` typed as `Promise<{ param: string }>` ?
- [ ] Am I using `await params` before accessing properties?
- [ ] Are all route handler functions properly handling async params?
- [ ] Am I using the correct pattern for my Next.js version?

### Common Next.js 15 Migration Issues:
1. **Build Error**: "Type 'X' does not satisfy constraint 'ParamCheck<RouteContext>'"
   - **Fix**: Wrap params type in Promise: `Promise<{ id: string }>`

2. **Runtime Error**: "params should be awaited before using its properties"
   - **Fix**: Use `const { id } = await params;` instead of `const { id } = params;`

3. **TypeScript Error**: "Property 'id' does not exist on type 'Promise<...>'"
   - **Fix**: Await the params object before destructuring

Remember: In Next.js 15, always treat `params` as a Promise that needs to be awaited!